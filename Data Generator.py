'''
The purpose of this script is to generate sensor data every 5 seconds.
These sensors are medical, sending data about the patient in a hospital.

Data generated by the sensors:
    - Timestamp
    - Heart rate (BPM)                          resting [60,100]   , stress [100-140] (120+)
    - Blood pressure (systolic)                 normal  [100-130]  , high > 140
    - Blood pressure (diastolic)                normal  [60-90]    , high > 95
    - Body temperature (°C)                     normal  [36.5,37.5], fever > 38
    - SpO₂ (oxygen saturation %)                normal  [95-100]   , low < 95
    - Respiration rate (breaths per minute)     normal  [12-20]    , slow < 10 , fast > 25
    - Patient ID / Device ID
    - Fall detected / Emergency flag (0/1 binary value for unusual movement)
'''

import random
import time
import pandas as pd
from datetime import datetime

# ---------------------- NORMAL RANGES ----------------------
def normal_heart_rate():
    return random.randint(60, 100)
def normal_blood_pressure_systolic():
    return random.randint(110, 130)
def normal_blood_pressure_diastolic():
    return random.randint(70, 90)
def normal_body_temperature():
    return round(random.uniform(36.5, 37.5), 1)
def normal_oxygen():
    return random.randint(95, 100)
def normal_respiration_rate():
    return random.randint(12, 20)

# ---------------------- ANOMALIES ----------------------
def anomaly_heart_rate_increase():
    return random.randint(120, 160)
def anomaly_heart_rate_decrease():
    return random.randint(40, 55)
def anomaly_blood_pressure_systolic_increase():
    return random.randint(140, 180)
def anomaly_blood_pressure_diastolic_increase():
    return random.randint(95, 110)
def anomaly_body_temperature_increase():
    return round(random.uniform(38, 41), 1)
def anomaly_oxygen():
    return random.randint(70, 94) 
def anomaly_respiration_rate_increase():
    return random.randint(25, 35)
def anomaly_respiration_rate_decrease():
    return random.randint(3, 10)

# ---------------------- PATIENTS ----------------------
diagnose = {
    "S01" : "Shortness of breath",
    "S02" : "Fever & possible infection",
    "S03" : "Hypertensive crisis / chest pain history",
    "S04" : "Post-op / fall risk elderly",
    "S05" : "Cardiac arrhythmia (AFib)"
}
patients = list(diagnose.keys())

# ---------------------- SIMULATION ----------------------
while True:
    record = pd.DataFrame()
    for pid in range(len(patients)):
        time_stamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Default normal values
        heart_rate = normal_heart_rate()
        blood_pressure_systolic = normal_blood_pressure_systolic()
        blood_pressure_diastolic = normal_blood_pressure_diastolic()
        body_temperature = normal_body_temperature()
        oxygen = normal_oxygen()
        respiration_rate = normal_respiration_rate()
        fall_detected = 0

        # 10% chance anomaly
        if random.random() < 0.1:
            if patients[pid] == "S01":  # Shortness of breath
                heart_rate = anomaly_heart_rate_increase()
                oxygen = anomaly_oxygen()
                respiration_rate = anomaly_respiration_rate_increase()

            elif patients[pid] == "S02":  # Fever
                heart_rate = anomaly_heart_rate_increase()
                body_temperature = anomaly_body_temperature_increase()
                respiration_rate = anomaly_respiration_rate_increase()

            elif patients[pid] == "S03":  # Hypertension
                heart_rate = anomaly_heart_rate_increase()
                blood_pressure_systolic = anomaly_blood_pressure_systolic_increase()
                blood_pressure_diastolic = anomaly_blood_pressure_diastolic_increase()

            elif patients[pid] == "S04":  # Post-op / fall risk
                if random.random() < 0.3:  # 30% chance bleeding/weak
                    heart_rate = anomaly_heart_rate_decrease()
                    blood_pressure_systolic = random.randint(90, 100)
                else:  # pain
                    heart_rate = anomaly_heart_rate_increase()
                fall_detected = 1 if random.random() < 0.2 else 0

            elif patients[pid] == "S05":  # AFib
                heart_rate = random.choice([anomaly_heart_rate_increase(), anomaly_heart_rate_decrease()])
                blood_pressure_systolic = random.randint(90, 120)  # unstable BP
                fall_detected = 1 if random.random() < 0.1 else 0
        data = pd.DataFrame([{
            "timestamp": time_stamp,
            "patient_id": pid,
            "heart_rate": heart_rate,
            "systolic_bp": blood_pressure_systolic,
            "diastolic_bp": blood_pressure_diastolic,
            "body_temp": body_temperature,
            "spo2": oxygen,
            "respiration_rate": respiration_rate,
            "fall_detected": fall_detected
        }])
        record = pd.concat([record,data])

        
    record.to_csv("Milestone 1/patient_data.csv", mode="w", index=True, header=True)
    time.sleep(5)  # generate every 5 sec
